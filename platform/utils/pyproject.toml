[build-system]
requires = ["uv_build>=0.8.3,<0.9.0"]
build-backend = "uv_build"

[project]
name = "evedata-utils"
version = "0.1.0"
description = ""
readme = "README.md"
authors = [{ name = "Corvin Vale", email = "corvin@valeant.space" }]
requires-python = ">=3.12"
dependencies = ["rich>=14.1.0"]

[dependency-groups]
dev = [
  "pyright>=1.1.403",
  "pytest>=8.4.1",
  "pytest-cov>=6.2.1",
  "pytest-env>=1.1.5",
  "pytest-mock>=3.14.1",
  "pytest-xdist>=3.8.0",
  "ruff>=0.12.9",
]

[tool.codespell]
check-filenames = true
check-hidden = true

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "semver"
version_provider = "uv"
update_changelog_on_bump = true
major_version_zero = true
gpg_sign = true
annotated_tags = true
changelog_merge_prerelease = true

[tool.pyright]
strict = ["src", "tests"]
venvPath = "."
venv = ".venv"
exclude = ["**/.*", "**/__pycache__", "**/node_modules"]

[tool.pytest.ini_options]
addopts = [
  "--tb",
  "short",
  "--cov",
  "evedata",
  "--cov-branch",
  "--cov-report",
  "term-missing",
]
env = { "EVEKIT_ENV" = "test" }
filterwarnings = ["error"]
testpaths = ["tests"]
xfail_strict = true

[tool.ruff]
target-version = "py313"
extend-exclude = ["tmp"]
line-length = 88

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "D",     # pydocstyle
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle (error)
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FAST",  # FastAPI
  "FBT",   # flake8-boolean-trap
  "FURB",  # refurb
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "ISC",   # flake8-implicit-str-concat
  "LOG",   # flake8-logging
  "N",     # pep8-naming
  "PERF",  # Perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # pylint
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "RET",   # flake8-return
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "TC",    # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TRY",   # tryceratops
  "UP",    # pyupgrade
]
pydocstyle = { convention = "google" }

[tool.ruff.lint.isort]
combine-as-imports = true
extra-standard-library = ["typing_extensions"]
forced-separate = ["tests"]

[tool.ruff.lint.flake8-type-checking]
quote-annotations = true
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "sqlalchemy.orm.DeclarativeBase",
]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  # Allow Pydantic's `@validator` decorator to trigger class method treatment.
  "pydantic.validator",
  # Allow SQLAlchemy's dynamic decorators, like `@field.expression`, to trigger class method treatment.
  "declared_attr",
  "expression",
  "comparator",
]

[tool.ruff.lint.per-file-ignores]
"**/__main__.py" = ["D100"]
"**/tests/**" = ["D", "PLR2004", "S101"]
"*.ipynb" = ["T20"]

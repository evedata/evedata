---
# Separate task file for creating and managing localhost-friendly kubeconfig
# This file contains the logic for creating a kubeconfig that uses 127.0.0.1
# instead of the public IP, which helps bypass firewall restrictions on port 16443

- name: Create localhost kubeconfig | Wait for original kubeconfig
  ansible.builtin.wait_for:
    path: /var/snap/microk8s/current/credentials/client.config
    state: present
    timeout: 60
    msg: "Original kubeconfig not found after 60 seconds"

- name: Create localhost kubeconfig | Check if localhost version exists
  ansible.builtin.stat:
    path: /var/snap/microk8s/current/credentials/client.localhost.config
  register: localhost_kubeconfig_stat

- name: Create localhost kubeconfig | Get original kubeconfig content
  ansible.builtin.slurp:
    src: /var/snap/microk8s/current/credentials/client.config
  register: original_kubeconfig_content
  when: not localhost_kubeconfig_stat.stat.exists or microk8s_force_recreate_localhost_kubeconfig | default(false)

- name: Create localhost kubeconfig | Check current server URL
  ansible.builtin.set_fact:
    current_server_url: "{{ (original_kubeconfig_content.content | b64decode | from_yaml).clusters[0].cluster.server }}"
  when: original_kubeconfig_content is defined and original_kubeconfig_content.content is defined

- name: Create localhost kubeconfig | Display current server URL
  ansible.builtin.debug:
    msg: "Current server URL in original kubeconfig: {{ current_server_url | default('Not yet available') }}"
  when: current_server_url is defined

- name: Create localhost kubeconfig | Create localhost version
  ansible.builtin.copy:
    src: /var/snap/microk8s/current/credentials/client.config
    dest: /var/snap/microk8s/current/credentials/client.localhost.config
    remote_src: true
    owner: root
    group: microk8s
    mode: "0640"
    backup: true
    force: "{{ microk8s_force_recreate_localhost_kubeconfig | default(false) }}"

- name: Create localhost kubeconfig | Replace server URL with localhost
  ansible.builtin.replace:
    path: /var/snap/microk8s/current/credentials/client.localhost.config
    regexp: 'https://[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:16443'
    replace: 'https://127.0.0.1:16443'
    backup: false

- name: Create localhost kubeconfig | Validate localhost kubeconfig format
  ansible.builtin.shell:
    cmd: |
      python3 -c "
      import yaml
      with open('/var/snap/microk8s/current/credentials/client.localhost.config', 'r') as f:
          config = yaml.safe_load(f)
          server = config['clusters'][0]['cluster']['server']
          if server != 'https://127.0.0.1:16443':
              exit(1)
      "
  changed_when: false
  register: kubeconfig_validation

- name: Create localhost kubeconfig | Set proper permissions
  ansible.builtin.file:
    path: /var/snap/microk8s/current/credentials/client.localhost.config
    owner: root
    group: microk8s
    mode: "0640"
    state: file

- name: Create localhost kubeconfig | Create symlink for convenience
  ansible.builtin.file:
    src: /var/snap/microk8s/current/credentials/client.localhost.config
    dest: /var/snap/microk8s/current/credentials/kubeconfig.localhost
    state: link
    owner: root
    group: microk8s
  failed_when: false  # Symlink creation might fail on some systems

- name: Create localhost kubeconfig | Report success
  ansible.builtin.debug:
    msg: |
      âœ“ Localhost kubeconfig successfully created at:
        /var/snap/microk8s/current/credentials/client.localhost.config

      This kubeconfig uses 127.0.0.1:16443 instead of the public IP,
      allowing kubectl access even when port 16443 is blocked on the public interface.

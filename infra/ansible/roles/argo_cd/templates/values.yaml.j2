# ArgoCD Helm Chart Values
# Generated by Ansible for {{ ansible_hostname }}
# This template configures ArgoCD for deployment with Tailscale ingress

# Global configuration
global:
  domain: "{{ argo_cd_hostname }}.{{ tailscale_dns_name | default('example') }}"
  logging:
    format: json
  networkPolicy:
    create: true

# Redis configuration
redis:
  enabled: {{ not argo_cd_redis_ha_enabled }}
  metrics:
    enabled: true
{% if argo_cd_redis_resources | length > 0 %}
  resources:
{{ argo_cd_redis_resources | to_nice_yaml(indent=2) | indent(4, first=False) }}
{% endif %}

# Redis HA configuration
redis-ha:
  enabled: {{ argo_cd_redis_ha_enabled }}
{% if argo_cd_redis_ha_enabled %}
  haproxy:
    enabled: true
  auth: true
  hardAntiAffinity: true
{% endif %}

# ArgoCD Server configuration
server:
  # Replica count for server
  replicas: {{ argo_cd_server_replicas }}

  # Insecure mode required for Tailscale ingress (TLS termination at Tailscale)
  metrics:
    enabled: true

  # Extra arguments for server
{% if argo_cd_server_extra_args | length > 0 %}
  extraArgs:
{% for arg in argo_cd_server_extra_args %}
    - {{ arg }}
{% endfor %}
{% else %}
  extraArgs: []
{% endif %}

  # Resource limits and requests
{% if argo_cd_server_resources | length > 0 %}
  resources:
{{ argo_cd_server_resources | to_nice_yaml(indent=2) | indent(4, first=False) }}
{% endif %}

  # Server configuration
  config:
    # URL will be set based on Tailscale ingress hostname
    url: "https://{{ argo_cd_hostname }}.{{ tailscale_dns_name | default('example') }}"

    # Admin account configuration
    accounts.admin: "apiKey{{ ',login' if argo_cd_admin_enabled else '' }}"

    # Application instance label key
    application.instanceLabelKey: argocd.argoproj.io/instance

  # Ingress is disabled as we'll create Tailscale-specific ingress separately
  ingress:
    enabled: false

  # gRPC ingress is disabled as we'll handle it separately
  ingressGrpc:
    enabled: false

# Application Controller configuration
controller:
  # Replica count for application controller
  replicas: {{ argo_cd_controller_replicas }}

  # Extra arguments for controller
{% if argo_cd_controller_extra_args | length > 0 %}
  extraArgs:
{% for arg in argo_cd_controller_extra_args %}
    - {{ arg }}
{% endfor %}
{% else %}
  extraArgs: []
{% endif %}

  # Resource limits and requests
{% if argo_cd_controller_resources | length > 0 %}
  resources:
{{ argo_cd_controller_resources | to_nice_yaml(indent=2) | indent(4, first=False) }}
{% endif %}

  # Enable metrics
  metrics:
    enabled: true

# Repository Server configuration
repoServer:
  # Replica count for repo server
  replicas: {{ argo_cd_repo_server_replicas }}

  # Extra environment variables
{% if argo_cd_repo_server_extra_env | length > 0 %}
  env:
{% for env in argo_cd_repo_server_extra_env %}
    - name: {{ env.name }}
      value: "{{ env.value }}"
{% endfor %}
{% endif %}

  # Resource limits and requests
{% if argo_cd_repo_server_resources | length > 0 %}
  resources:
{{ argo_cd_repo_server_resources | to_nice_yaml(indent=2) | indent(4, first=False) }}
{% endif %}

  # Enable metrics
  metrics:
    enabled: true

# ApplicationSet Controller configuration
applicationSet:
  # Replica count for ApplicationSet controller
  replicas: {{ argo_cd_applicationset_replicas }}

  # Resource limits and requests
{% if argo_cd_applicationset_resources | length > 0 %}
  resources:
{{ argo_cd_applicationset_resources | to_nice_yaml(indent=2) | indent(4, first=False) }}
{% endif %}

  # Enable metrics
  metrics:
    enabled: true

# Dex is enabled by default
dex:
  metrics:
    enabled: true

# Notifications controller
notifications:
  enabled: true

  metrics:
    enabled: true

# CRDs installation
crds:
  install: true
  keep: true

configs:
  params:
    server.insecure: true

name: Documentation
on:
  push:
    branches:
      - main
    paths:
      - "docs/**"
  pull_request:
    branches:
      - main
    paths:
      - "docs/**"
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "Deployment target"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
          - both

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  UV_CACHE_DIR: .uv_cache
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - run: uv python install 3.13
      - run: |
          uv sync --frozen --all-extras
          uv pip list
      - working-directory: docs
        run: make lint

  deploy-pr:
    name: Deploy PR
    environment: docs-dev
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request'
    timeout-minutes: 60
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            docs
            includes
      - run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev pngquant
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - run: uv python install 3.13
      - run: uv sync --frozen --all-extras
      - working-directory: docs
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: make deploy-pr
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = `https://pr-${prNumber}-evedata-docs-dev.evedata-dqt.workers.dev`;

            const comment = `ðŸ“š **Documentation Preview Ready!**

            Your documentation changes have been deployed to:
            ðŸ”— ${previewUrl}

            This preview will be updated automatically as you push new commits to this PR.`;

            const { data: comments } = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Documentation Preview Ready')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

  deploy-stg:
    name: Deploy Staging
    environment: docs-stg
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'staging' || inputs.deploy_target == 'both'))
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            docs
            includes
      - run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev pngquant
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - run: uv python install 3.13
      - run: uv sync --frozen --all-extras
      - working-directory: docs
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: make deploy-stg

  deploy-prd:
    name: Deploy Production
    environment: docs-prd
    runs-on: ubuntu-latest
    needs: deploy-stg
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'production' || inputs.deploy_target == 'both'))
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            docs
            includes
      - run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev pngquant
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - uses: astral-sh/setup-uv@v6
        with:
          version-file: "pyproject.toml"
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
      - run: uv python install 3.13
      - run: uv sync --frozen --all-extras
      - working-directory: docs
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: make deploy-prd
